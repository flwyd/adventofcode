%!PS
% Copyright 2024 Google LLC
%
% Use of this source code is governed by an MIT-style
% license that can be found in the LICENSE file or at
% https://opensource.org/licenses/MIT.

% Advent of Code 2024 day 17 https://adventofcode.com/2024/day/17
%
% Input is five lines: "Register A: number", the same for B and C, a blank line,
% and "Program: 1,2,3,4...".  The program represents a series of opcodes and
% operators that would be too long to explain here.  The "out" instruction
% adds a register value to be output.  Part 1's answer is a comma-separated
% list of the output values.  Part 2's task is to figure out the lowest number
% that Register A could start with for the output to be a Quine (i.e. output and
% program are the same.)  It turns out that inputs are constructed so that the
% starting values for B and C don't matter, the last operator is always jnz,0
% which goes to the start of the program if A is non-zero and runs off the end
% and halts otherwise.  The fact A must be 0 at the end of the program allows
% the problem to be tractable.

(cob/bootstrap.ps) runlibfile
(cob/arraylist.ps) cob.require
(cob/ascii.ps) cob.require
(cob/core.ps) cob.require
(cob/iter.ps) cob.require
(cob/log.ps) cob.require
(cob/math.ps) cob.require
(cob/stackeffect.ps) cob.require
(cob/string.ps) cob.require
(cob/stringbuf.ps) cob.require
(aoc.ps) cob.require

/Day17 8 dict def
Day17 begin

/COMBO [ 0 1 2 3 { A } { B } { C } { (UH OH, it's a seven) = -100000000 } ] def

/combo { % op combo int
  COMBO exch get exec
} bind def %/combo

/incip { % - incip -
  2 /IP incby
} bind def %/incip

/divide { % op register divide -
  combo 2 exch exp cvi A exch idiv
} bind def %/divide

/adv { % op adv -
  divide /A exch def incip
} bind def %/adv

/bdv { % op bdv -
  divide /B exch def incip
} bind def %/bdv

/cdv { % op cdv -
  divide /C exch def incip
} bind def %/cdv

/bxl { % op bxl -
  B xor /B exch def incip
} bind def %/bxl

/bst { % op bst -
  combo 8 mod /B exch def incip
} bind def %/bst

/jnz { % op jnz -
  A 0 eq { pop incip } { /IP exch def } ifelse
} bind def %/jnz

/bxc { % op bxc -
  pop B C xor /B exch def incip
} bind def %/bxc

/out { % op out -
  combo 8 mod OUT exch alpush incip
} bind def %/out

/OPCODES [ { adv } { bxl } { bst } { jnz } { bxc } { out } { bdv } { cdv } ] def

/parseinput { % input parseinput -
  /input exch def /IP 0 def /OUT alist def
  input 0 get tokenize last /A exch def
  input 1 get tokenize last /B exch def
  input 2 get tokenize last /C exch def
  input 4 get (: ) split exch pop [ exch (,) split ] [ exch { cvi } forall ] /PROGRAM exch def
} bind def %/parseinput

/runprogram { % - runprogram string
   /IP 0 def OUT alclear
  { %loop
    IP PROGRAM lastindex gt { exit } if
    PROGRAM IP 1 add get PROGRAM IP get OPCODES exch get exec
  } loop
  OUT alview
} bind def %/runprogram

/part1 { 8 dict begin % [lines] part1 result
  parseinput runprogram (,) join dup empty? { pop /nothing } if
end } bind def %/part1

/part2 { 8 dict begin % [lines] part2 result
  parseinput /prevmaybe [0] def
  PROGRAM { %fordown
    /i exch def /maybe alist def
    prevmaybe {
      /m exch def 0 1 7 { %for
        m 8 mul add /curA exch def
        /A curA def runprogram
        PROGRAM i tailfrom deepeq { maybe curA alpush } if
      } for
    } forall
    /prevmaybe maybe alview def
  } fordown
  prevmaybe empty? { /answer 0 def } { %else
    prevmaybe first prevmaybe { min } forall /answer exch def
  } ifelse
  % /A answer def runprogram (,) join =
  % input 4 get =
  answer
end } bind def %/part2

end %Day17

/ARGUMENTS where { pop /Day17 aoc.runday } if
