%!PS
% Copyright 2024 Google LLC
%
% Use of this source code is governed by an MIT-style
% license that can be found in the LICENSE file or at
% https://opensource.org/licenses/MIT.

% Basic utilities, many used by other libraries.

% Comma operators are like the regular operator but they leave the "subject" on
% the stack in a convenient position.

% get, works like get but leaves the string, array, or dict at the top of the
% stack after the returned value.  The index/key is consumed.  Example:
% myarray 0 get, 3 get, 7 get, % stack has 3 items and an array
% myarray dup length 1 sub -1 0 { get, } for % aload in reverse
/get, { 1 index exch get exch } bind def % iter key get, value iter

% getinterval, works like getinterval but leaves the source array at the top of
% the stack.  Example:
% myarray 0 2 2 index length 2 sub { 2 getinterval, } for
/getinterval, { 2 index 3 1 roll getinterval exch } bind def

% put, works like put but leaves the string, array, or dict at the top of the
% stack, consuming the key and value. Example:
% 4 dict /name (Calvin) put, /age 8 put, /friend (Hobbes) put,
/put, { 2 index 3 1 roll put } bind def % iter key value put, iter

% putinterval, works like putinterval but leaves the source array at the top of
% the stack.  Example:
% myarray 0 [/a /b /c] putinterval, dup length 4 sub [/x /y /z] putinterval,
/putinterval, { 2 index 3 1 roll putinterval } bind def

% known, is like known but leaves the dict and name on the stack under the bool
% value.  Example: mydict /key known, { 2 copy get 1 add put } { 1 put } ifelse
/known, { 2 copy known } bind def

% where, is like where but leaves the name on the stack under the bool value,
% above the dict if any.  Example: /foo where, { get } { default def } ifelse
/where, { dup where { exch true } { false } ifelse } bind def

% token, is similar to token, but always leaves the file or remaining string on
% the stack below the parsed token plus true or below false.  This is similar to
% the behavior of the "found" case of string token.    To read all tokens in a
% file or string, see `tokenize` in string.ps.
/token, { % file token, file any true | file token, file false
          % string token, post any true | string token, () false
  dup type /filetype eq { %ifelse
    dup token
  } { %else
    token { true } { () false } ifelse
  } ifelse
} bind def

% TODO read, write, and friends

% indexfrommark adds a copy of the object n positions before the closest mark to
% the top of the stack.  0 indexfrommark adds another mark.  Negative values
% access items after the mark, so -1 indexfrommark copies the first element of
% an array under construction.
/indexfrommark { % anyn ... any1 mark ... n indexfrommark n
  counttomark add 1 sub index
} bind def %/indexfrommark

% rollfrommark performs a roll covering the stack up to mark and then n more
% items.  Positive numbers extend the roll window before the mark, negative
% numbers shrink the roll window closer to the top of the stack than the mark,
% 0 makes mark the first item in the roll window.
/rollfrommark { % an ... a1 mark ... x n -1 rollfrommark ... a1 mark ... x an
                % an ... a1 mark ... x n 1 rollfrommark x an ... a1 mark ...
  exch counttomark add 1 sub exch roll
} bind def

% unless works like `if` with the condition reversed: Example:
% currentdict /foo known { (foo is unknown) print } unless
/unless { exch not exch if } bind def % bool proc unless ?

% until executes proc1 in a loop as long as proc2 returns true.  Note the loop
% always executes at least once.  Skip a block of text in a program:
% { currentfile token } { /END_OF_BLOCK eq } until
/until { 2 dict begin % proc1 proc2:bool until -
  [ /proc /exec cvx /cond /exec cvx { exit } /if cvx ]
  pstack
  dup 2 4 -1 roll put
  dup 0 4 -1 roll put
  cvx bind
  loop
  % /_cond exch def
  % /_proc exch def
  % { _proc exec _cond exec { exit } if } bind loop
end } bind def

% while executes proc1 in a loop until proc2 returns false. Note the loop always
% executes at least once.  Read file lines into an array:
% /f (file.txt) (r) file def
% [ { f 128 string readline } { } while pop ]
% f closefile
% The conditional block is empty because readline leaves a boolean on the stack,
% the pop is needed to remove the trailing blank line (assuming no dangling
% line without a newline.)
/while { 2 dict begin % proc1 proc2:bool while -
  /_cond exch def
  /_proc exch def
  { _proc exec _cond exec not { exit } if } bind loop
end } bind def

% contains? returns true if any element in array eq the given value or if any
% character in a string eq the given char.
/contains? { % array any contains? bool
             % string char contains? bool
  false 3 -1 roll { 2 index eq { pop true exit } if } forall exch pop
} bind def %/contains?

/new.IMPL 4 dict def
new.IMPL begin
  /arraytype { array } def
  /dicttype { dict } def
  /nametype { string } def
  /stringtype { string } def
end

% cat allocates a new compound object of the same type as the two args and with
% twice the length, then copies arg1 and then arg2 into the new object.
% If both args were executable, the result will be executable too.
% If the final arg is an integer >= 2, that many items will be concatenated.
% TODO handle array+packedarray or name+string
/cat { % (str1) (str2) cat (str1str2)
       % /name1 /name2 cat /name1name2
       % [a1 ... an] [b1 ... bn] cat [a1 ... an b1 ... bn]
       % <</k1 v1 /k2 v2>> </k3 v3 /k1 v4> cat <</k2 v2 /k3 v3 /k1 v4>>
       % x1 x2 ... xn n cat x1x2...xn
  cat.IMPL begin dup type exec end
} bind def %/cat

% Adapted from Thinking in PostScript example 11.7.
/cat.IMPL 4 dict def
cat.IMPL begin % stack: arg1 arg1
  { % string/array impl:
    % save executable status for end
    1 index xcheck 1 index xcheck and 3 1 roll
    dup length 2 index length add 1 index new.IMPL begin type exec end
    % stack: xcheck arg1 arg2 new on all three lines below
    dup 0 4 index putinterval
    dup 4 -1 roll length 4 -1 roll putinterval
    % stack: xcheck new
    % set new item executable if both args were
    exch { cvx } if
  } bind dup
  /arraytype exch def
  /stringtype exch def
  /nametype {
    2 { exch dup xcheck exch dup length string cvs exch { cvx } if} repeat
    cat cvn
  } bind def
  /packedarraytype { % TODO N packedarray after aload, but need length
    exch aload length dup 2 add -1 roll
    % stack: items... length array
    aload length dup 2 add -1 roll add packedarray
  } bind def
  /dicttype {
    dup length 2 index length add 2 mul dict
    % stack: dict1 dict2 new
    3 -1 roll { 2 index 3 1 roll put } forall
    % stack: dict2 new
    exch { 2 index 3 1 roll put } forall
    % stack: new
  } bind def %/dicttype
  /integertype { 1 sub { cat } repeat } bind def
end

% clone makes a deep copy of its argument.  Any string, array, or dict is copied
% to a new instance of the same type, and any nested compound objects are also
% copied.  packedarray objects are returned as-is, without cloning nested
% objects.  Behavior is undefined on other mutable objects, e.g. files.
/clone { % any clone any
  dup safercheck { %if
    dup type /stringtype eq { %ifelse
      dup length string copy
    } { %else
      dup type /arraytype eq { %ifelse
        dup [ exch { clone } forall ] exch xcheck { cvx } if
      } { %else
        dup type /dicttype eq { %if
          dup length 2 mul dict begin
            { exch clone exch clone def } forall currentdict
          end
        } if % other objects are either immutable or not easy to clone
      } ifelse
    } ifelse
  } if
} bind def %/clone

% deepeq recursively compares two objects for equality.
/deepeq { % any1 any2 deepeq bool
  2 copy type exch type ne 2 index isarray? 2 index isarray? and not and { %ifelse
       pop pop false
    } { %else
    2 copy eq { pop pop true } { %else
      dup type dup /arraytype eq exch /packedarraytype eq or { deepeq.array } { %else
        dup type /dicttype eq { deepeq.dict } { %else
          pop pop false
        } ifelse
      } ifelse
    } ifelse
  } ifelse
} bind def %/deepeq

% deepne is a convenient way to spell `deepeq not`.
/deepne { deepeq not } bind def

% deepeq.array recursively compares (using deepeq) two arrays for equality.
/deepeq.array { % array1 array2 deepeq.array bool
  2 copy length exch length ne { false } { %else
    % loop invariant: a1 a2 result; result popped and added again
    true 0 1 3 index length 1 sub {
      exch pop 2 index 1 index get 2 index 3 -1 roll get
      deepeq { true } { false exit } ifelse
    } for
  } ifelse
  3 1 roll pop pop
} bind def %/deepeq.array

% deepeq.dict recursively compares (using deepeq) two dicts for equality.
/deepeq.dict { % dict1 dict2 deepeq.dict bool
  2 copy length exch length ne { false } { %else
    % loop invariant: a1 a2 result; result popped and added again
    true 2 index {
      3 -1 roll pop exch % stack: a1 a2 value key
      2 index exch { pop false exit } getorelse
      deepeq { true } { false exit } ifelse
    } forall
  } ifelse
  3 1 roll pop pop
} bind def %/deepeq.dict

% getor returns `dict key get` if key is known, otherwise returns default.
/getor { % dict key default getor value | default
  2 index 2 index known { pop get } { 3 1 roll pop pop } ifelse
} bind def %/getor

% getorget returns `dict key get` if key is known, otherwise `get elsekey get`.
/getorget { % dict key elsekey getorget value
  2 index 2 index known { pop get } { exch pop get } ifelse
} bind def %/getorget

% getor returns `dict key get` if key is known.  Otherwise it executes proc,
% passing key as an argument.
/getorelse { % dict key proc getorelse value | key proc exec
  2 index 2 index known { pop get } { 3 -1 roll pop exec } ifelse
} bind def %/getorelse

% keys takes a dict and returns an array of all its keys.
/keys { % dict keys [k1 k2 ...]
  [ exch { pop } forall ]
} bind def %/keys

% values takes a dict and returns an array of all its values.
/values { % dict values [k1 k2 ...]
  [ exch { exch pop } forall ]
} bind def %/values

% dec decrements the named value in a dict by one.  With just a name, looks up
% the dict with `where`, with `name dict dec` decrements the value in that dict.
/dec { % name dec -
  dup type /dicttype eq { -1 3 1 roll } { -1 exch } ifelse incby
} bind def %/dec

% decby decrements the named value in a dict by amount.  With just an amount
% and a name, looks up the dict with `where`, when a dict is the final
% argument, decrements the value in that dict.
/decby { % amount name decby -
         % amount name dict decby -
  dup type /dicttype eq { 3 -1 roll neg 3 1 roll } { exch neg exch } ifelse
} bind def %/decby

% inc increments the named value in a dict by one.  With just a name, looks up
% the dict with `where`, with `name dict inc` increments the value in that dict.
/inc { % name inc -
       % name dict inc -
  dup type /dicttype eq { 1 3 1 roll } { 1 exch } ifelse incby
} bind def %/inc

% incby increments the named value in a dict by amount.  With just an amount
% and a name, looks up the dict with `where`, when a dict is the final
% argument, increments the value in that dict.
/incby { % amount name incby -
         % amount name dict incby -
  dup type /dicttype eq { exch 2 copy get 4 -1 roll add put } { %else
    dup where { %ifelse
      dup 2 index get 4 -1 roll add 3 -1 roll exch put
    } { %else
      /incby cvx /undefined signalerror
    } ifelse
  } ifelse
} bind def %/incby

% isarray? returns true if the argument is an array or packedarray type, false
% otherwise.
/isarray? { % array isarray? true
            % packedarray isarray? true
  dup type /arraytype eq exch type /packedarraytype eq or
} bind def %/isarray?

% types? takes n objects, n type names, and the integer n and returns true if
% all n objects have the corresponding n types.  Example use:
% 2 copy /stringtype /stringtype 2 types? {concatstrings} {[3 1 roll]} ifelse
/types? { % any1 ... anyn type1 ... typen n types? bool
  % count result stay at the top of the stack, each iteration pops a type
  true 1 index { 3 -1 roll 2 index 2 add index type eq and } repeat
  % pop all the objects, leave result
  exch { exch pop } repeat
} bind def %/types?

% CheckableTypes is a list of types which rcheck, wcheck, and xcheck can all
% be used.  Note that /nametype is not in the list since it can only be used
% with xcheck.
/CheckableTypes [
  /stringtype /dicttype /arraytype /packedarraytype /filetype
] def %/CheckableTypes

% safercheck calls rcheck on its argument if the type is valid for rcheck and
% returns true otherwise.
/safercheck { % any safercheck bool
  dup type //CheckableTypes exch contains? { rcheck } { pop true } ifelse
} bind def %/safercheck

% safewcheck calls wcheck on its argument if the type is valid for wcheck and
% returns false otherwise.
/safewcheck { % any safewcheck bool
  dup type //CheckableTypes exch contains? { wcheck } { pop false } ifelse
} bind def %/safewcheck

% safexcheck calls xcheck on its argument if the type is valid for xcheck and
% returns false otherwise.
/safexcheck { % any safexcheck bool
  dup type //CheckableTypes exch contains? { xcheck } { %else
    dup /nametype eq { xcheck } { pop false } ifelse
  } ifelse
} bind def %/safexcheck
