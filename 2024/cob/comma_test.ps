%!PS
% Copyright 2024 Google LLC
%
% Use of this source code is governed by an MIT-style
% license that can be found in the LICENSE file or at
% https://opensource.org/licenses/MIT.

(cob/bootstrap.ps) runlibfile
(cob/ascii.ps) cob.require
(cob/core.ps) cob.require
(cob/testing.ps) cob.require

test.suite begin

  (get,) {
    % final get doesn't have a comma, so string doesn't stay on stack
    (lorem ipsum) 1 get, 3 get, 5 get, 7 get, 9 get
      [ ascii.o ascii.e ascii.sp ascii.p ascii.u ] assert.stack
    % all get, have a comma so array stays on top at the end
    [ /a /b /c /d /e /f ] dup length 1 sub -1 0 { get, } for
      [ /f /e /d /c /b /a [ /a /b /c /d /e /f ] ] assert.stack
    8 dict begin
      /CA (Canada) def
      /US (United States) def
      /MX (Mexico) def
      /BZ (Belize) def
      /GT (Guatemala) def
      /SV (El Salvador) def
      currentdict
    end
    % final get doesn't have a comma
    /BZ get, /CA get, /GT get [ (Belize) (Canada) (Guatemala) ] assert.stack
  } test.case

  (put,) {
     (xxxxx) 0 ascii.A put, 2 ascii.B put, 4 ascii.C put, (AxBxC) assert.eq
     4 array 3 -11 put, 1 3.14 put, 2 true put, 0 /foo put,
      [ /foo 3.14 true -11 ] assert.deepeq
     4 dict /fellowship /ring put, /two /towers put, /return /king put,
      << /fellowship /ring /two /towers /return /king >> assert.deepeq
  } test.case

  (getinterval,) {
    % final getinterval doesn't have a comma
    (Lorem ipsum dolor sit amet) 0 5 getinterval, 6 5 getinterval, 18 8 getinterval
      [ (Lorem) (ipsum) (sit amet) ] assert.stack
    % final getinterval, has a comma
    [ 1 10 { dup 2 mul } repeat ] 0 3 getinterval, 1 3 getinterval, 5 2 getinterval, 7 4 getinterval,
      [ [ 1 2 4 ] [ 2 4 8 ] [ 32 64 ] [128 256 512 1024 ] [ 1 2 4 8 16 32 64 128 256 512 1024 ] ] assert.stack
  } test.case

  (putinterval,) {
    (Hello, world!) 0 (Do) putinterval, 4 (y) putinterval, 10 (ds?) putinterval, (Dolly, words?) assert.eq
    [ /a /b /c /d /e /f /g ] 1 [ 54 46 ] putinterval, 5 [ 42 ] putinterval, 2 [ 7 20 69 ] putinterval,
      [ /a 54 7 20 69 42 /g ] assert.deepeq
  } test.case

  (known,) {
    << /magic 3 /math /rocks >> /math known, { get } if /rocks assert.eq
    << /foo 42 /bar -12 >> dup /missing known,
      { (/missing was there) assert.fail } { /found put } ifelse
      << /foo 42 /bar -12 /missing /found >> assert.deepeq
  } test.case

  (where,) {
    << /meaning 42 /president /Zaphod >> begin
      /president where, { get /Zaphod assert.eq } { (missing president) assert.fail } ifelse
      /book where, not { (Guide) def } if
      book (Guide) assert.eq
    end
  } test.case

  test.run
end
