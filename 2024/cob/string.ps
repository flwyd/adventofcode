%!PS
% Copyright 2024 Google LLC
%
% Use of this source code is governed by an MIT-style
% license that can be found in the LICENSE file or at
% https://opensource.org/licenses/MIT.

% Procedures for converting to or otherwise working with strings.

(cob/bootstrap.ps) runlibfile
(cob/ascii.ps) cob.require
(cob/core.ps) cob.require
(cob/iter.ps) cob.require
(cob/stringbuf.ps) cob.require

/tostring.IMPL 16 dict begin % type tostring.IMPL proc:any
  /stringtype { dup rcheck not { pop (--string:xo--) } if } def % else the input
  /nametype { dup length string cvs } bind def
  /operatortype { 32 string cvs } bind def
  /nulltype { pop (null) } def
  /booleantype { 5 string cvs } bind def
  /integertype { 20 string cvs } bind def
  /realtype { 20 string cvs } bind def

  /arraytype {
    dup rcheck { %ifelse
      stringbuf dup 0 ascii.lbracket sbput
      exch { tostring 1 index exch sbappend dup ( ) sbappend } forall
      dup dup sblength dup 1 ne { 1 sub } if ascii.rbracket sbput
      sbstring
    } {
      type /arraytype eq { (--array:xo--) } { (--packedarray:xo--) } ifelse
    } ifelse
  } bind def
  /packedarraytype /arraytype load def

  /dicttype {
    dup rcheck { %ifelse
      stringbuf dup (<<) sbappend
      exch {
        2 index 2 index type /nametype eq { dup (/) sbappend } if
        % stack: stringbuf key val stringbuf
        dup 4 -1 roll tostring sbappend ( ) sbappend
        % stack: stringbuf value
        tostring 1 index dup 3 -1 roll sbappend ( ) sbappend
      } forall
      dup dup sblength dup 2 ne { 1 sub } if ascii.rangle sbput dup (>) sbappend
      sbstring
    } { pop (--dict:xo--) } ifelse
  } bind def

  /else {
    stringbuf dup (-) sbappend
    % /filetype -> (file)
    exch type dup length string cvs dup length 4 sub 0 exch getinterval
    1 index exch sbappend
    sbstring
  } bind def
  currentdict
end def %tostring.IMPL

/tostring.RECURSION_LEVEL 0 def

% tostring converts one object to a string representation.
/tostring { % any tostring string
  tostring.RECURSION_LEVEL 8 eq { %ifelse
    type dup length string cvs (--) exch (:recursionlimit--) 3 cat
  } { %else
    /tostring.RECURSION_LEVEL tostring.RECURSION_LEVEL 1 add def
    tostring.IMPL 1 index type /else getorget exec
    /tostring.RECURSION_LEVEL tostring.RECURSION_LEVEL 1 sub def
  } ifelse
} bind def %/tostring

% toupper returns a copy of string with all ASCII letters changed to upper case.
/toupper { % string toupper STRING
  dup length string 0 1 2 index length 1 sub { %for
    dup 3 index exch get ascii.toupper 2 index 3 1 roll put
  } for
  exch pop
} bind def %/toupper

% tolower returns a copy of string with all ASCII letters changed to lower case.
/tolower { % STRING tolower string
  dup length string 0 1 2 index length 1 sub { %for
    dup 3 index exch get ascii.tolower 2 index 3 1 roll put
  } for
  exch pop
} bind def %/tolower

% join with an array returns a string with a separator between each pair of
% elements.  join with a dict returns a string with each key and value
% separated by kvsep and each pair separated by entrysep.
/join { % array separator join string
        % dict kvsep entrysep join string
  2 copy /arraytype /stringtype 2 types?
  3 copy pop /packedarraytype /stringtype 2 types? or { %ifelse
    stringbuf true 4 -1 roll {
      % stack: separator stringbuf atstart value
      1 index { exch not exch } { 2 index 4 index sbappend } ifelse
      tostring 2 index exch sbappend
    } forall
    pop exch pop sbview
  } { % else
    3 copy /dicttype /stringtype /stringtype 3 types? { %ifelse
      stringbuf true 5 -1 roll { %forall
        % stack: kvsep entrysep stringbuf atstart key value
        2 index { 3 -1 roll not 3 1 roll } { 3 index 5 index sbappend } ifelse
        3 index 3 1 roll exch tostring 2 index exch sbappend
        5 index 2 index exch sbappend
        tostring sbappend
      } forall
      pop 3 1 roll pop pop sbview
    } { %else
      /join cvx errordict /typecheck get exec
    } ifelse
  } ifelse
} bind def %/join

% split returns one element on the stack for each substring before or after
% separator in the input string.  Separators at the beginning or end of the
% string result in an empty string in the first or last position in the stack.
% A string with no separator returns that string, including the case of an empty
% string.  An empty string separator splits the string into single-character
% strings.  If the number of delimiters in the string are unknown, insert a
% mark before calling split: `[ whatever (,) split ]`.
/split { % string separator split string1 ... stringn
  dup empty? { %ifelse
    pop { 1 string dup 0 4 -1 roll put } forall
  } { %else
     { search not { exit } if 3 1 roll } loop
  } ifelse
} bind def %/split

% splitlines converts a string with line breaks to an array of line strings.
% Returns an empty array if string is empty, returns a 1-length array if string
% lacks newlines.  \r\n sequences are treated as a single line break, \r alone
% is not a line break.
/splitlines { % string splitlines [line strings]
  [ 0 0 3 index { %forall
    % loop stack: string [ lines... start length
    ascii.nl eq { %ifelse
      2 copy 1 indexfrommark 3 1 roll getinterval
      % Remove \r from \r\n sequences
      dup ascii.cr endswith? { dup length 1 sub 0 exch getinterval } if
      % put line before start, add length to start, reset length
      3 1 roll add 1 add 0
    } { 1 add } ifelse
  } forall
  % stack: string [ lines... start unterminatedlen ]
  dup 0 gt { 1 indexfrommark 3 1 roll getinterval  } { pop pop } ifelse
  ] exch pop
} bind def %/splitlines

% trimspace returns a view of string shortened to remove any leading or trailing
% whitespace characters.
/trimspace { % string trimspace string
  0 { dup 2 index length eq { exit } if 2 copy get ascii.space? { 1 add } { exit } ifelse } loop
  1 index length 1 index sub % stack: string start sublength
  { %loop
    dup 0 eq { exit } if
    3 copy add 1 sub get ascii.space? { 1 sub } { exit } ifelse
  } loop
  getinterval
} bind def %/trimspace
