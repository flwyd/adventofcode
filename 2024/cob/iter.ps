%!PS
% Copyright 2024 Google LLC
%
% Use of this source code is governed by an MIT-style
% license that can be found in the LICENSE file or at
% https://opensource.org/licenses/MIT.

% Functions which apply to multiple types of compound objects, typically at
% least arrays and strings.

(cob/arraylist.ps) cob.require
(cob/core.ps) cob.require
(cob/stackeffect.ps) cob.require

% all? returns true if a predicate returns true for each item in an iterable
% (string, array, or dict), false if the predicate returns false for any item.
% Returns true if the iterable is empty.
/all? { % iter predicate all? bool
  true 3 -1 roll { 2 index exec and dup not { exit } if } forall exch pop
} bind def %/all?

% any? returns true if a predicate returns true for any item in an iterable
% (string, array, or dict), false if the predicate returns false for all items.
% Returns false if the iterable is empty.
/any? { % iter predicate any? bool
  false 3 -1 roll { 2 index exec or dup { exit } if } forall exch pop
} bind def %/any?

% empty? returns true if the argument has no elements, false if it has any.
/empty? { % string|array|dict empty? bool
  length 0 eq
} bind def %/empty?

% first returns element zero of an array or character of a string.
/first { % a first a[0]
  0 get
} bind def %/first

% firstor returns element 0 element of an array or string if it's not empty, otherwise
% returns default.
/firstor { % a default firstor a[-1]|default
  1 index empty? { exch pop } { pop first } ifelse
} bind def %/firstor

% last returns the final element of an array or character of a string.
/last { % a last a[-1]
  dup length 1 sub get
} bind def %/last

% lastor returns the final element of an array or string if it's not empty,
% otherwise returns default.
/lastor { % a default lastor a[-1]|default
  1 index empty? { exch pop } { pop last } ifelse
} bind def %/lastor

% startswithat? returns true if the N items of string1/array1 starting at pos
% are deeply equal to the N items of string2/array2.  Returns false If the
% second item is longer than the first or the comparison would run off the end
% of the first item.
/startswithat? { % iter1 iter2 pos startswithat? bool
  dup 0 lt { pop pop pop false } { %else
    3 copy exch length add exch length gt { pop pop pop false } { %else
      abc:bacb length getinterval
      true 0 1 3 index length 1 sub { %for
        abcd:abcdad get exch abcd:abcad get deepne { pop false exit } if
      } for abc:c
    } ifelse
  } ifelse
} bind def %/startswithat?

% startswith? returns whether if the first N items of iter1 are deeply equal to
% all N elements of iter2.  Returns false if iter2 is longer than iter1.  Note
% that `[(foo) (bar)] (foo) startswith?` returns false, wrap the latter in an
% array or do `[(foo) (bar)] first (foo) deepeq`.
/startswith? { % iter1 iter2 startswith? bool
  0 startswithat?
} bind def %/startswith?

% endswith? returns whether if the last N items of iter1 are deeply equal to
% all N elements of iter2.  Returns false if iter2 is longer than iter1.  Note
% that `[(foo) (bar)] (bar) endswith?` returns false, wrap the latter in an
% array.  or do `[(foo) (bar)] last (foo) deepeq`.
/endswith? { % iter1 iter2 endswith? bool
  1 index length 1 index length sub startswithat?
} bind def %/endswith?

% indexof returns the index of the first occurrence of item in an array or
% string and true if the item is found, or just false if item does not occur in
% the iterable.
/indexof { % iter item indexof int true
           % iter item indexof false
  false 2 index { %forup
    dup 4 index exch get 3 index deepeq { abcd:d true exit } { pop } ifelse
  } forup
  { true } { pop pop false } ifelse
} bind def %/indexof

% withindex returns an array of two-element arrays with the index and iter's
% value at that index.
/withindex { % iter withindex [[0 iter0] .. [n itern]]
  [ exch dup { [ abc:acbab get ] exch } forup pop ]
} bind def %/withindex

% forallindex is like forall on a dict but for an array or string.  proc is
% called with two args: the 0-based index and the value in iter at that index.
/forallindex { % iter proc forallindex ?
  exch withindex exch { aload pop } exch cat forall
} bind def %/forallindex

% reverse modifies an array or string, putting elements in the reverse order.
/reverse { % array reverse -
           % string reverse -
  0 1 2 index length 2 idiv 1 sub { %for
    ab:aaba length 1 index sub 1 sub
    % stack: iter i1 i2
    abc:abcab get abcd:abcdaac get
    % stack: iter i1 i2 v1 iter v2
    abcde:bcdae put put
  } for
  pop
} bind def %/reverse

/reversed.IMPL 8 dict def
reversed.IMPL begin
  /arraytype { clone dup reverse } bind def
  /stringtype { clone dup reverse } bind def
  /nametype {
    dup xcheck exch dup length string cvs dup reverse cvn exch { cvx } if
  } bind def
  /packedarraytype {
    [ exch aload pop ] dup reverse aload length packedarray
  } bind def
  /dicttype { << exch { exch } forall >> } bind def
end %/reversed.IMPL

% reversed returns a new composite object of the same type as the input and
% elements in reverse order.
/reversed { % [a1 ... an] reversed [an ... a1]
  reversed.IMPL begin dup type load end exec
} bind def %/reversed

% head returns an iterable with the first n elements of the input iterable.
% The returned array or string is a live view of the original.
/head { % [a0 .. an .. ax] n head [a0 .. an-1]
  0 exch 2 index length min getinterval
} bind def %/head

% headto returns an iterable without the last n items of the input iterable.
% The returned array or string is a live view of the original.
/headto { % [a0 .. ax-n ax-n-1 .. ax] n headto [a0 .. ax-n]
  1 index length exch sub 0 max head
} bind def %/headto

% tail returns an iterable with the last n elements of the input iterable.
% The returned array or string is a live view of the original.
/tail { % [a0 .. ax-n-1 .. ax] n tail [ax-n-1 .. ax]
  1 index length 1 index sub 0 max exch 2 index length min getinterval
} bind def %/tail

% tailfrom returns an iterable without the first n items of the input iterable.
% The returned array or string is a live view of the original.
/tailfrom { % [a0 .. an .. ax] n tailfrom [an .. ax]
  % 1 index length 1 sub getinterval
  1 index length exch sub 0 max tail
} bind def %/tailfrom

% compare performs a natural comparison of x and y using the lt and gt
% operators, returning -1 if x < y, 1 if x > y, and 0 if x = y.
/compare { % x y compare int
  2 copy lt { pop pop -1 } { gt { 1 } { 0 } ifelse } ifelse
} bind def %/compare

% descending takes a comparator and returns a comparator which compares values
% in the opposite direction.  `arr /compare cvx descending isorted` returns an
% array sorted largest to smallest.
/descending { % comparator descending -comparator
  [ exch /exec cvx -1 /mul cvx ] cvx
} bind def %/descending

% isort performs an insertion sort on array with comparison function comparator,
% which must return -1 if two elements are in ascending order, 1 if they are in
% descending order, and 0 if they are equal.
/isort { % array comparator isort -
  1 1 3 index length 1 sub { %for
    abc:abcac get dup 4 index 3 index 1 sub get
    % stack: array compare i a[i] a[i] a[i-1]
    4 index exec 0 lt { %ifelse
      1 index 1 sub -1 0 { %for
        % stack: array compare i a[i] j
        abcde:abcdeae get abcde:abcdeca exec 0 le { %ifelse
          1 add exit
        } { % else
          0 eq { 0 } if
        } ifelse
      } for
      % stack: array compare i a[i] j
      abcde:abcdeaece sub getinterval
      % stack: array compare i a[i] j a[j:i]
      5 index 2 index 1 add 3 -1 roll putinterval
      % stack: array compare i a[i] j
      abcde:abcaed put
    } { %else
      pop % a[i]
    } ifelse
    pop % i
  } for
  pop pop
} bind def %/isort

% isortby sorts array based on the result of calling proc on each element.
% proc must take one argument and leave one value on the stack.
/isortby { % array proc isortby -
  [ exch /exec cvx /exch cvx 2 index /exec cvx /exch cvx /compare cvx ] cvx isort
} bind def %/isortby

% isort clones array and performs isort, returning the sorted array.
% The initial array is not modified.
/isorted { % array comparator isorted arraycopy
  exch clone ab:bba isort
} bind def %/isorted

% isortedby clones array and performs isortby, returning the sorted array by
% proc.  The initial array is not modified.
/isortedby { % array proc isortedby arraycopy
  exch clone ab:bba isortby
} bind def %/isortedby

% sorted? returns true if comparator returns negative or zero for each
% successive pair of elements in array (or string).
/sorted? { % array comparator sorted? boolean
  dup xcheck not { /sorted? cvx /typecheck signalerror } if
  true 2 index empty? not { %if
    2 index first 3 index { %forall
      ab:bab 4 index exec 0 gt { pop false exch exit } if
    } forall
    pop
  } if
  abc:c
} bind def %/sorted?

% sortedby? returns true if each element in the array or string, transformed by
% proc, is less than or equal to each successive element.
/sortedby? { % array proc sortedby? boolean
  [ exch /exec cvx /exch cvx 2 index /exec cvx /exch cvx /compare cvx ] cvx sorted?
} bind def %/sortedby?

% zip takes an array of arrays or strings and returns an array of arrays where
% the i'th array has the i'th value from each input array.
/zip { % [ a0 a1 ... an ] zip [ [ a00 a10 ... an0 ] ... [ a0n a1n ... ann ] ]
  0 1 index { length max } forall dup [ exch { alist } repeat ]
  % stack: input ziplen output
  abc:bca { %forall
    % stack: ziplen output input[i]
    0 1 4 index 1 sub { %for
      % stack: ziplen output input[i] j
      ab:abba length ge { null } { 2 copy get } ifelse
      % stack: ziplen output input[i] j value
      3 index 3 -1 roll get exch alpush
    } for
    pop
  } forall
  ab:b [ exch { alview } forall ]
} bind def %/zip
