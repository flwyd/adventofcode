%!PS
% Copyright 2024 Google LLC
%
% Use of this source code is governed by an MIT-style
% license that can be found in the LICENSE file or at
% https://opensource.org/licenses/MIT.

% Advent of Code 2024 day 7 https://adventofcode.com/2024/day/7
%
% Input is lines of the form "total: int int...".  Result is the sum of the
% total field for all valid lines.  In part 1, a line is valid if a combination
% of addition and multiplication operations, applied left-to-right with no
% precedence, causes the ints after the column to equal the total.  In part 2
% a new operator is added which turns two ints into their base 10 concatenation.

(cob/bootstrap.ps) runlibfile
(cob/arraylist.ps) cob.require
(cob/ascii.ps) cob.require
(cob/core.ps) cob.require
(cob/iter.ps) cob.require
(cob/log.ps) cob.require
(cob/math.ps) cob.require
(cob/stackeffect.ps) cob.require
(cob/string.ps) cob.require
(cob/stringbuf.ps) cob.require
(aoc.ps) cob.require

/Day7 8 dict def
Day7 begin

/parseinput { % [lines] parseinput [[total] [i1 i2 ..] ..]
  [ exch { [ exch (: ) split exch cvi exch tokenize reversed ] } forall ]
} bind def %/parseinput

% Base 10 concatenation, with the most significant int at the top of the stack.
/thirdop { % int int thirdop int
  exch dup log floor 1 add 10 exch exp cvi 3 -1 roll mul add
} bind def %/thirdop

/procs [ /add /mul /thirdop ] def
/PROCBUF alist def
/procfor { % length int procfor proc
  PROCBUF dup alclear 3 1 roll exch { %repeat
    dup 0 eq { 0 } { NUMOPS divmod } ifelse
    procs exch get cvx 2 index exch alpush
  } repeat
  pop alarray reversed cvx
} bind def %/procfor

/buildprocs { % proclength buildprocs -
  /BYLENGTH exch array def
  timing.start
  1 1 BYLENGTH lastindex {
    BYLENGTH 1 index NUMOPS 1 index exp cvi array put
    0 1 NUMOPS 3 index exp cvi 1 sub {
      2 copy procfor bind BYLENGTH 3 index get 3 1 roll put
    } for pop
  } for
  dup timing.finish
  [ BYLENGTH length (length procs created in) 1 -1 rollfrommark /fmttime get ] log.info
} bind def %/buildprocs

/valid? { % [val [ops]] valid? bool
  /subject exch def
  /proclength subject 1 get length 1 sub def
  false 0 1 NUMOPS proclength exp cvi 1 sub {
    BYLENGTH proclength get exch get
    subject 1 get aload length 1 add -1 roll exec
    subject 0 get eq { pop true exit } if
  } for
} bind def %/valid?

/solve { 8 dict begin % input numops solve result
  /NUMOPS exch def
  parseinput /input exch def
  0 input { last length max } forall buildprocs
  0 input { dup valid? { first add } { pop } ifelse } forall
end } bind def %/solve

/part1 { % [lines] part1 result
  2 solve
} bind def %/part1

/part2 { % [lines] part2 result
  3 solve
} bind def %/part2

end %Day7

/ARGUMENTS where { pop /Day7 aoc.runday } if
