// Code generated by go run ./genday24.go input.actual.txt; DO NOT EDIT
package main

func Compute_inputactual(input [14]int) (int, [15]int) {
	var i, w, x, y, z int
	var zvals [15]int
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 1
	z /= 1
	// add x 12
	x += 12
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 6
	y += 6
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 1
	z /= 1
	// add x 10
	x += 10
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 2
	y += 2
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 1
	z /= 1
	// add x 10
	x += 10
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 13
	y += 13
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 26
	z /= 26
	// add x -6
	x += -6
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 8
	y += 8
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 1
	z /= 1
	// add x 11
	x += 11
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 13
	y += 13
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 26
	z /= 26
	// add x -12
	x += -12
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 8
	y += 8
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 1
	z /= 1
	// add x 11
	x += 11
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 3
	y += 3
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 1
	z /= 1
	// add x 12
	x += 12
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 11
	y += 11
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 1
	z /= 1
	// add x 12
	x += 12
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 10
	y += 10
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 26
	z /= 26
	// add x -2
	x += -2
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 8
	y += 8
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 26
	z /= 26
	// add x -5
	x += -5
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 14
	y += 14
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 26
	z /= 26
	// add x -4
	x += -4
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 6
	y += 6
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 26
	z /= 26
	// add x -4
	x += -4
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 8
	y += 8
	// mul y x
	y *= x
	// add z y
	z += y
	// inp w
	zvals[i] = z
	w = input[i]
	i++
	// mul x 0
	x *= 0
	// add x z
	x += z
	// mod x 26
	x %= 26
	// div z 26
	z /= 26
	// add x -12
	x += -12
	// eql x w
	if x == w {
		x = 1
	} else {
		x = 0
	}
	// eql x 0
	if x == 0 {
		x = 1
	} else {
		x = 0
	}
	// mul y 0
	y *= 0
	// add y 25
	y += 25
	// mul y x
	y *= x
	// add y 1
	y += 1
	// mul z y
	z *= y
	// mul y 0
	y *= 0
	// add y w
	y += w
	// add y 2
	y += 2
	// mul y x
	y *= x
	// add z y
	z += y
	zvals[14] = z
	return z, zvals
}
